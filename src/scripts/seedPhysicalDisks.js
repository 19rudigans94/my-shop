import { mockPhysicalDisks } from "../data/mockPhysicalDisks.js";
import mongoose from "mongoose";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import dotenv from "dotenv";

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, "../../.env") });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.NEXT_PUBLIC_MONGODB_URI) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω NEXT_PUBLIC_MONGODB_URI –≤ —Ñ–∞–π–ª–µ .env");
  process.exit(1);
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
const gameSchema = new mongoose.Schema({
  title: { type: String, required: true },
  platforms: { type: [String], required: true },
  description: { type: String, required: true },
  image: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  genre: { type: [String], required: true },
});

const physicalDiskSchema = new mongoose.Schema({
  gameId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Game",
    required: true,
  },
  platform: {
    type: String,
    required: true,
  },
  variants: [
    {
      condition: {
        type: String,
        enum: ["new", "used"],
        required: true,
      },
      stock: {
        type: Number,
        required: true,
        min: 0,
        default: 0,
      },
      price: {
        type: Number,
        required: true,
      },
    },
  ],
});

// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
const Game = mongoose.model("Game", gameSchema);
const PhysicalDisk = mongoose.model("PhysicalDisk", physicalDiskSchema);

async function seedPhysicalDisks() {
  try {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    console.log(`üì° URI: ${process.env.NEXT_PUBLIC_MONGODB_URI}`);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await mongoose.connect(process.env.NEXT_PUBLIC_MONGODB_URI);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    console.log("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –¥–∏—Å–∫–∞–º–∏...");

    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    await PhysicalDisk.deleteMany({});
    console.log("‚ú® –ö–æ–ª–ª–µ–∫—Ü–∏—è PhysicalDisk –æ—á–∏—â–µ–Ω–∞");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä
    for (const disk of mockPhysicalDisks) {
      try {
        const game = await Game.findById(disk.gameId);
        if (!game) {
          console.error(`‚ùå –ò–≥—Ä–∞ —Å ID ${disk.gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∏–≥—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        if (!game.platforms.includes(disk.platform)) {
          console.error(
            `‚ùå –ò–≥—Ä–∞ ${game.title} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ${disk.platform}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`
          );
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –¥–∏—Å–∫–µ
        const physicalDisk = new PhysicalDisk(disk);
        await physicalDisk.save();
        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –¥–∏—Å–∫ –¥–ª—è –∏–≥—Ä—ã ${game.title} (${disk.platform})`
        );
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏—Å–∫–∞ –¥–ª—è –∏–≥—Ä—ã ${disk.gameId}:`,
          error
        );
        continue;
      }
    }

    console.log("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –¥–∏—Å–∫–∞–º–∏!");
    await mongoose.disconnect();
    process.exit(0);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    await mongoose.disconnect();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
seedPhysicalDisks();
