import { mockGames } from "../data/mockGames.js";
import mongoose from "mongoose";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import dotenv from "dotenv";

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, "../../.env") });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.NEXT_PUBLIC_MONGODB_URI) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω NEXT_PUBLIC_MONGODB_URI –≤ —Ñ–∞–π–ª–µ .env");
  process.exit(1);
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É
const gameSchema = new mongoose.Schema({
  title: { type: String, required: true },
  platforms: { type: [String], required: true },
  description: { type: String, required: true },
  image: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  genre: { type: [String], required: true },
  youtubeUrl: { type: String, required: true },
});

// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
const Game = mongoose.model("Game", gameSchema);

async function seedGames() {
  try {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    console.log(`üì° URI: ${process.env.NEXT_PUBLIC_MONGODB_URI}`);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await mongoose.connect(process.env.NEXT_PUBLIC_MONGODB_URI);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    console.log("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞–º–∏...");

    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    await Game.deleteMany({});
    console.log("‚ú® –ö–æ–ª–ª–µ–∫—Ü–∏—è Game –æ—á–∏—â–µ–Ω–∞");

    // –î–æ–±–∞–≤–ª—è–µ–º youtubeUrl –∫ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const gamesWithYoutube = mockGames.map((game) => ({
      ...game,
      youtubeUrl: `https://www.youtube.com/watch?v=${game.slug}`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã
    const games = await Game.insertMany(gamesWithYoutube);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${games.length} –∏–≥—Ä:`);

    // –í—ã–≤–æ–¥–∏–º ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
    games.forEach((game) => {
      console.log(`üìù ${game.title}: ${game._id}`);
    });

    console.log("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–≥—Ä–∞–º–∏!");
    console.log("\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è mockPhysicalDisks.js");

    await mongoose.disconnect();
    process.exit(0);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    if (error.code === 11000) {
      console.error("–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è (slug)");
    }
    await mongoose.disconnect();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
seedGames();
