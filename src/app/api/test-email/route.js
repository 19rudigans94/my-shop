import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

export async function GET() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = [
      "NEXT_SMTP_HOST",
      "NEXT_SMTP_PORT",
      "NEXT_SMTP_USER",
      "NEXT_SMTP_PASSWORD",
      "NEXT_FEEDBACK_MAIL",
    ];

    const missingVars = requiredEnvVars.filter(
      (varName) => !process.env[varName]
    );

    if (missingVars.length > 0) {
      return NextResponse.json({
        success: false,
        error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(", ")}`,
        missingVars,
      });
    }

    console.log("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
    const transporter = nodemailer.createTransport({
      host: process.env.NEXT_SMTP_HOST,
      port: parseInt(process.env.NEXT_SMTP_PORT),
      secure: true,
      auth: {
        user: process.env.NEXT_SMTP_USER,
        pass: process.env.NEXT_SMTP_PASSWORD,
      },
      tls: {
        rejectUnauthorized: false,
      },
      debug: true,
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º...");
    await transporter.verify();
    console.log("‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    console.log("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞...");
    const testEmail = {
      from: `GoldGames Test <${process.env.NEXT_FEEDBACK_MAIL}>`,
      to: process.env.NEXT_SMTP_USER,
      subject: "üß™ –¢–µ—Å—Ç email —Å–∏—Å—Ç–µ–º—ã GoldGames",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2 style="color: #333;">üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ</h2>
          <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã email —Å–∏—Å—Ç–µ–º—ã GoldGames.</p>
          <div style="background-color: #d4edda; border: 1px solid #c3e6cb; padding: 15px; margin: 20px 0; border-radius: 5px;">
            <h4 style="color: #155724; margin: 0;">‚úÖ Email —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h4>
            <p style="color: #155724; margin: 10px 0 0 0;">
              –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString("ru-RU")}<br>
              –°–µ—Ä–≤–µ—Ä: ${process.env.NEXT_SMTP_HOST}:${
        process.env.NEXT_SMTP_PORT
      }<br>
              –û—Ç: ${process.env.NEXT_FEEDBACK_MAIL}<br>
              –ö–æ–º—É: ${process.env.NEXT_SMTP_USER}
            </p>
          </div>
        </div>
      `,
    };

    const info = await transporter.sendMail(testEmail);

    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", {
      messageId: info.messageId,
      accepted: info.accepted,
      rejected: info.rejected,
    });

    return NextResponse.json({
      success: true,
      message: "Email —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
      details: {
        messageId: info.messageId,
        accepted: info.accepted,
        rejected: info.rejected,
        smtpConfig: {
          host: process.env.NEXT_SMTP_HOST,
          port: process.env.NEXT_SMTP_PORT,
          from: process.env.NEXT_FEEDBACK_MAIL,
          to: process.env.NEXT_SMTP_USER,
        },
      },
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email:", error);

    return NextResponse.json(
      {
        success: false,
        error: error.message,
        details: {
          code: error.code,
          command: error.command,
          response: error.response,
        },
      },
      { status: 500 }
    );
  }
}
