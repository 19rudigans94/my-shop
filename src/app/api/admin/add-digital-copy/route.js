import { NextResponse } from "next/server";
import connectDB from "@/lib/mongodb";
import DigitalCopy from "@/models/DigitalCopy";

export async function POST(request) {
  try {
    const { gameId, platform, price, credentials } = await request.json();

    console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–ø–∏–∏:", {
      gameId,
      platform,
      price,
      credentialsCount: credentials?.length || 0,
    });

    await connectDB();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–æ–ø–∏—é
    const digitalCopy = new DigitalCopy({
      gameId,
      platform,
      price,
      isActive: true,
      credentials: credentials.map((cred) => ({
        login: cred.login,
        password: cred.password,
        isActive: true,
        createdAt: new Date(),
      })),
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    const savedCopy = await digitalCopy.save();

    console.log("‚úÖ –¶–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:", {
      _id: savedCopy._id,
      gameId: savedCopy.gameId,
      platform: savedCopy.platform,
      credentialsCount: savedCopy.credentials.length,
    });

    return NextResponse.json({
      success: true,
      message: "–¶–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      data: savedCopy,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–ø–∏–∏:", error);
    return NextResponse.json(
      {
        success: false,
        error: error.message,
      },
      { status: 500 }
    );
  }
}

// –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Detroit: Become Human PS5
export async function GET() {
  try {
    await connectDB();

    const detroitGameId = "68108e446add4283cdf87171"; // ID –∏–≥—Ä—ã Detroit: Become Human –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è –¥–ª—è PS5
    const existingCopy = await DigitalCopy.findOne({
      gameId: detroitGameId,
      platform: "PS5",
    });

    if (existingCopy) {
      return NextResponse.json({
        success: false,
        message: "–¶–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è Detroit: Become Human PS5 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        existing: existingCopy,
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–æ–ø–∏—é –¥–ª—è Detroit: Become Human PS5
    const digitalCopy = new DigitalCopy({
      gameId: detroitGameId,
      platform: "PS5",
      price: 12, // –¢–∞ –∂–µ —Ü–µ–Ω–∞, —á—Ç–æ —É PS4 –≤–µ—Ä—Å–∏–∏
      isActive: true,
      credentials: [
        {
          login: "detroit_user1@psn.com",
          password: "DetroitPS5_2025",
          isActive: true,
          createdAt: new Date(),
        },
      ],
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    const savedCopy = await digitalCopy.save();

    console.log(
      "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è Detroit: Become Human PS5:",
      savedCopy
    );

    return NextResponse.json({
      success: true,
      message:
        "–¶–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è Detroit: Become Human PS5 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      data: savedCopy,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:", error);
    return NextResponse.json(
      {
        success: false,
        error: error.message,
      },
      { status: 500 }
    );
  }
}
