import { NextResponse } from "next/server";
import {
  sendOrderConfirmationEmail,
  sendManagerNotificationEmail,
} from "@/app/utils/sendEmail";
import connectDB from "@/lib/mongodb";
import DigitalCopy from "@/models/DigitalCopy";

export async function POST(request) {
  try {
    const { orderData, paymentId } = await request.json();

    console.log("üìß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É email:", {
      email: orderData.contactData.email,
      itemsCount: orderData.items.length,
      paymentId,
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDB();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
    const processedItems = [];
    let hasDigitalItems = false;
    let hasPhysicalItems = false;

    for (const item of orderData.items) {
      const processedItem = {
        name: item.title,
        quantity: item.quantity,
        price: item.price,
        total: item.total,
        category: item.category,
        platform: item.platform,
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä —Ü–∏—Ñ—Ä–æ–≤—ã–º
      if (item.category === "games" && item.platform) {
        hasDigitalItems = true;

        // –ò—â–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        try {
          const digitalCopies = await DigitalCopy.find({
            gameId: item.id,
            platform: item.platform,
            status: "available",
          }).limit(item.quantity);

          if (digitalCopies.length >= item.quantity) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∫ —Ç–æ–≤–∞—Ä—É
            processedItem.digitalKeys = digitalCopies.map((copy) => copy.key);

            // –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á–∏ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
            await DigitalCopy.updateMany(
              { _id: { $in: digitalCopies.map((copy) => copy._id) } },
              {
                status: "sold",
                soldAt: new Date(),
                soldTo: orderData.contactData.email,
                paymentId: paymentId,
              }
            );

            console.log(
              `üîë –í—ã–¥–∞–Ω–æ ${digitalCopies.length} –∫–ª—é—á–µ–π –¥–ª—è ${item.title}`
            );
          } else {
            console.warn(
              `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è ${item.title}. –ù—É–∂–Ω–æ: ${item.quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${digitalCopies.length}`
            );
            processedItem.keysAvailable = digitalCopies.length;
            processedItem.keysNeeded = item.quantity;
            hasPhysicalItems = true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä
          }
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–π –¥–ª—è ${item.title}:`,
            error
          );
          hasPhysicalItems = true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      } else {
        hasPhysicalItems = true;
      }

      processedItems.push(processedItem);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
    const emailData = {
      customer: {
        name: orderData.contactData.email.split("@")[0],
        phone: orderData.contactData.phone,
        email: orderData.contactData.email,
      },
      order: {
        items: processedItems,
        totalAmount: orderData.totalPrice,
        hasDigitalItems,
        hasPhysicalItems,
        paymentId,
        orderDate: orderData.orderDate,
      },
      orderId: paymentId || `ORDER-${Date.now()}`,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
    const customerEmailSent = await sendOrderConfirmationEmail(emailData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –º–µ–Ω–µ–¥–∂–µ—Ä—É
    const managerEmailSent = await sendManagerNotificationEmail(emailData);

    const results = {
      customerEmail: customerEmailSent,
      managerEmail: managerEmailSent,
    };

    console.log("üìß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", results);

    if (customerEmailSent || managerEmailSent) {
      return NextResponse.json({
        success: true,
        message: "Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
        results,
        hasDigitalItems,
        hasPhysicalItems,
      });
    } else {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –ø–∏—Å—å–º–æ");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
    return NextResponse.json(
      {
        success: false,
        error: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email",
      },
      { status: 500 }
    );
  }
}
