import { NextResponse } from "next/server";
import {
  sendOrderConfirmationEmail,
  sendManagerNotificationEmail,
} from "@/app/utils/sendEmail";
import connectDB from "@/lib/mongodb";
import DigitalCopy from "@/models/DigitalCopy";
import nodemailer from "nodemailer";

export async function POST(request) {
  try {
    const { orderData, paymentId } = await request.json();

    console.log("üìß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É email:", {
      email: orderData.contactData.email,
      itemsCount: orderData.items.length,
      paymentId,
      items: orderData.items.map((item) => ({
        title: item.title,
        id: item.id,
        category: item.category,
        platform: item.platform,
      })),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SMTP
    const requiredEnvVars = [
      "NEXT_SMTP_HOST",
      "NEXT_SMTP_PORT",
      "NEXT_SMTP_USER",
      "NEXT_SMTP_PASSWORD",
      "NEXT_FEEDBACK_MAIL",
    ];

    const missingVars = requiredEnvVars.filter(
      (varName) => !process.env[varName]
    );

    if (missingVars.length > 0) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", missingVars);
      return NextResponse.json(
        {
          success: false,
          error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(", ")}`,
        },
        { status: 500 }
      );
    }

    console.log("‚úÖ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", {
      host: process.env.NEXT_SMTP_HOST,
      port: process.env.NEXT_SMTP_PORT,
      user: process.env.NEXT_SMTP_USER ? "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      password: process.env.NEXT_SMTP_PASSWORD
        ? "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        : "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      from: process.env.NEXT_FEEDBACK_MAIL,
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º
    try {
      const testTransporter = nodemailer.createTransport({
        host: process.env.NEXT_SMTP_HOST,
        port: process.env.NEXT_SMTP_PORT,
        secure: true,
        auth: {
          user: process.env.NEXT_SMTP_USER,
          pass: process.env.NEXT_SMTP_PASSWORD,
        },
        tls: {
          rejectUnauthorized: false,
        },
      });

      await testTransporter.verify();
      console.log("‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ");
    } catch (smtpError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º:", {
        error: smtpError.message,
        code: smtpError.code,
        command: smtpError.command,
      });
      return NextResponse.json(
        {
          success: false,
          error: `–û—à–∏–±–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${smtpError.message}`,
        },
        { status: 500 }
      );
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDB();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
    const processedItems = [];
    let hasDigitalItems = false;
    let hasPhysicalItems = false;

    for (const item of orderData.items) {
      const processedItem = {
        name: item.title,
        quantity: item.quantity,
        price: item.price,
        total: item.total,
        category: item.category,
        platform: item.platform,
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã–º (–∏–≥—Ä–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π)
      // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä—ã: category, type, –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ platform
      const isGame =
        item.category === "games" ||
        item.type === "game" ||
        (item.platform &&
          ["PS4", "PS5", "XBOX", "PC", "Nintendo Switch"].includes(
            item.platform
          ));

      if (isGame && item.platform) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –∏–≥—Ä—ã:`, {
          title: item.title,
          id: item.id,
          platform: item.platform,
          quantity: item.quantity,
        });

        // –ò—â–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        try {
          console.log(`üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, {
            searchId: item.id,
            searchPlatform: item.platform,
            searchTitle: item.title,
            variant: item.variant,
          });

          let digitalCopies = [];

          // –ï—Å–ª–∏ variant === "digital", —Ç–æ item.id —ç—Ç–æ —É–∂–µ ID —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–ø–∏–∏
          if (item.variant === "digital") {
            console.log(`üéØ –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–ø–∏–∏ –ø–æ ID: ${item.id}`);

            const digitalCopy = await DigitalCopy.findById(item.id);
            if (digitalCopy && digitalCopy.isActive) {
              digitalCopies = [digitalCopy];
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è –Ω–∞–ø—Ä—è–º—É—é:`, {
                _id: digitalCopy._id,
                gameId: digitalCopy.gameId,
                platform: digitalCopy.platform,
                price: digitalCopy.price,
                credentialsCount: digitalCopy.credentials?.length || 0,
              });
            }
          } else {
            // –ò—â–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–ø–∏–∏ –ø–æ gameId (–¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤)
            digitalCopies = await DigitalCopy.find({
              gameId: item.id,
              platform: item.platform,
              isActive: true,
            }).limit(item.quantity);
          }

          console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ gameId:`, {
            found: digitalCopies.length,
            copies: digitalCopies.map((copy) => ({
              _id: copy._id,
              gameId: copy.gameId,
              platform: copy.platform,
              credentialsCount: copy.credentials?.length || 0,
            })),
          });

          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ gameId, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∏–≥—Ä–µ
          if (digitalCopies.length === 0) {
            console.log(
              `‚ö†Ô∏è –¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ gameId, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫`
            );

            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–≥—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –µ—ë ID
            const Game = (await import("@/models/Game")).default;

            const gameByTitle = await Game.findOne({
              $or: [
                { title: item.title },
                {
                  title: new RegExp(
                    item.title.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"),
                    "i"
                  ),
                },
                { slug: item.title.toLowerCase().replace(/\s+/g, "-") },
              ],
            });

            if (gameByTitle) {
              console.log(`üéÆ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:`, {
                gameId: gameByTitle._id,
                title: gameByTitle.title,
              });

              // –ò—â–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–ø–∏–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É ID –∏–≥—Ä—ã
              digitalCopies = await DigitalCopy.find({
                gameId: gameByTitle._id,
                platform: item.platform,
                isActive: true,
              }).limit(item.quantity);

              console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–≥—Ä—ã:`, {
                found: digitalCopies.length,
                copies: digitalCopies.map((copy) => ({
                  _id: copy._id,
                  gameId: copy.gameId,
                  platform: copy.platform,
                  credentialsCount: copy.credentials?.length || 0,
                })),
              });
            } else {
              console.log(
                `‚ùå –ò–≥—Ä–∞ "${item.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ games`
              );
            }
          }

          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –Ω—É–∂–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —ç—Ç–æ–π –∏–≥—Ä—ã
          if (digitalCopies.length === 0) {
            console.log(
              `üîç –¶–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è –¥–ª—è ${item.platform} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:`
            );

            // –ò—â–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–ø–∏–∏ —ç—Ç–æ–π –∏–≥—Ä—ã –¥–ª—è –ª—é–±—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            const allCopiesForGame = await DigitalCopy.find({
              gameId: gameByTitle?._id || item.id,
              isActive: true,
            });

            console.log(
              `üìã –í—Å–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –∏–≥—Ä—ã "${item.title}":`,
              allCopiesForGame.map((copy) => ({
                _id: copy._id,
                gameId: copy.gameId,
                platform: copy.platform,
                price: copy.price,
                credentialsCount: copy.credentials?.length || 0,
                activeCredentials:
                  copy.credentials?.filter((cred) => cred.isActive).length || 0,
              }))
            );

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ø–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
            if (allCopiesForGame.length > 0) {
              const availablePlatforms = allCopiesForGame.map(
                (copy) => copy.platform
              );
              console.log(
                `‚ö†Ô∏è –ò–≥—Ä–∞ "${
                  item.title
                }" –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –≤–∏–¥–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º: ${availablePlatforms.join(
                  ", "
                )}, –Ω–æ –ù–ï –¥–ª—è ${item.platform}`
              );

              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∫ —Ç–æ–≤–∞—Ä—É
              processedItem.availableDigitalPlatforms = availablePlatforms;
              processedItem.requestedPlatform = item.platform;
              processedItem.digitalAvailableElsewhere = true;
            }
          }

          console.log(
            `üîë –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–ø–∏–π: ${digitalCopies.length} –∏–∑ ${item.quantity} –Ω—É–∂–Ω—ã—Ö`
          );

          if (digitalCopies.length >= item.quantity) {
            hasDigitalItems = true;

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (credentials) –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏–π
            const availableCredentials = [];

            for (const copy of digitalCopies.slice(0, item.quantity)) {
              // –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ credentials –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–ø–∏–∏
              const activeCredentials = copy.credentials.filter(
                (cred) => cred.isActive
              );

              if (activeCredentials.length > 0) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                const credential = activeCredentials[0];
                availableCredentials.push({
                  login: credential.login,
                  password: credential.password,
                  platform: copy.platform,
                });

                // –ü–æ–º–µ—á–∞–µ–º credential –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                credential.isActive = false;
                await copy.save();
              }
            }

            if (availableCredentials.length > 0) {
              // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫ —Ç–æ–≤–∞—Ä—É
              processedItem.digitalKeys = availableCredentials;

              console.log(
                `üîë –í—ã–¥–∞–Ω–æ ${availableCredentials.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è ${item.title}`
              );
            } else {
              console.warn(
                `‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏—è—Ö –¥–ª—è ${item.title}`
              );
              hasPhysicalItems = true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä
            }
          } else {
            console.warn(
              `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–ø–∏–π –¥–ª—è ${item.title}. –ù—É–∂–Ω–æ: ${item.quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${digitalCopies.length}`
            );
            processedItem.keysAvailable = digitalCopies.length;
            processedItem.keysNeeded = item.quantity;
            hasPhysicalItems = true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä
          }
        } catch (error) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–π –¥–ª—è ${item.title}:`,
            error
          );
          hasPhysicalItems = true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      } else {
        hasPhysicalItems = true;
      }

      processedItems.push(processedItem);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
    console.log("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:", {
      hasDigitalItems,
      hasPhysicalItems,
      totalItems: processedItems.length,
      digitalItemsCount: processedItems.filter((item) => item.digitalKeys)
        .length,
      physicalItemsCount: processedItems.filter((item) => !item.digitalKeys)
        .length,
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
    const emailData = {
      customer: {
        name: orderData.contactData.email.split("@")[0],
        phone: orderData.contactData.phone,
        email: orderData.contactData.email,
      },
      order: {
        items: processedItems,
        totalAmount: orderData.totalPrice,
        hasDigitalItems,
        hasPhysicalItems,
        paymentId,
        orderDate: orderData.orderDate,
      },
      orderId: paymentId || `ORDER-${Date.now()}`,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
    const customerEmailSent = await sendOrderConfirmationEmail(emailData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –º–µ–Ω–µ–¥–∂–µ—Ä—É
    const managerEmailSent = await sendManagerNotificationEmail(emailData);

    const results = {
      customerEmail: customerEmailSent,
      managerEmail: managerEmailSent,
    };

    console.log("üìß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", results);

    if (customerEmailSent || managerEmailSent) {
      return NextResponse.json({
        success: true,
        message: "Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
        results,
        hasDigitalItems,
        hasPhysicalItems,
      });
    } else {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –ø–∏—Å—å–º–æ");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
    return NextResponse.json(
      {
        success: false,
        error: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email",
      },
      { status: 500 }
    );
  }
}
