import { NextResponse } from "next/server";
import { getTimePlus30Minutes } from "../../utils/lifeTime";
import connectDB from "@/lib/mongodb";
import Order from "@/models/Order";

export async function POST(request) {
  try {
    const { cartData } = await request.json();
    console.log("üì¶ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã:", JSON.stringify(cartData, null, 2));

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (cartData.contactData) {
      console.log("üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", {
        phone: cartData.contactData.phone,
        email: cartData.contactData.email,
      });
    }

    const expired_at = getTimePlus30Minutes();

    // –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const shopSecret = process.env.PAYLINK_SHOP_SECRET;
    const shopId = process.env.PAYLINK_SHOP_ID;
    let returnUrl = process.env.PAYLINK_RETURN_URL;

    // –ï—Å–ª–∏ PAYLINK_RETURN_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!returnUrl) {
      const protocol = request.headers.get("x-forwarded-proto") || "https";
      const host = request.headers.get("host") || "goldgames.kz";
      returnUrl = `${protocol}://${host}/api/paylink/verification`;
      console.log(
        "‚ö†Ô∏è PAYLINK_RETURN_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π:",
        returnUrl
      );
    }

    console.log("üîó Return URL:", returnUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if (!shopId || !shopSecret) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PayLink");
      return NextResponse.json(
        { success: false, error: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PayLink" },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const orderName =
      cartData.items?.[0]?.title || "–ü–æ–∫—É–ø–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ";
    const orderDescription =
      cartData.items
        ?.map((item) => `${item.title} (${item.quantity}—à—Ç)`)
        .join(", ") || "–ó–∞–∫–∞–∑ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞";

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è PayLink API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const payload = {
      name: orderName,
      description: orderDescription,
      currency: "KZT",
      amount: Math.round(cartData.totalPrice * 100),
      infinite: true,
      test: false,
      immortal: false,
      expired_at: expired_at, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ immortal
      language: "ru", // –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      return_url: returnUrl,
    };

    console.log("üì§ Payload –¥–ª—è PayLink:", JSON.stringify(payload, null, 2));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ PayLink API
    const authString = `${shopId}:${shopSecret}`;
    const base64Auth = Buffer.from(authString).toString("base64");

    const response = await fetch("https://api.paylink.kz/products", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Basic ${base64Auth}`,
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå –û—à–∏–±–∫–∞ PayLink API:", {
        status: response.status,
        statusText: response.statusText,
        errorText: errorText,
      });

      let error;
      try {
        error = JSON.parse(errorText);
      } catch (e) {
        error = { message: errorText };
      }

      return NextResponse.json(
        { success: false, error: error },
        { status: response.status }
      );
    }

    const result = await response.json();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if (result && result.uid) {
      try {
        await connectDB();

        const orderData = {
          uid: result.uid,
          items: cartData.items.map((item) => ({
            id: item.id,
            title: item.title,
            price: item.price,
            quantity: item.quantity,
            total: item.price * item.quantity,
            category: item.category,
            image: item.image,
            platform: item.platform,
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            type:
              item.category === "games" && item.platform
                ? "digital"
                : "physical",
          })),
          totalPrice: cartData.totalPrice,
          totalItems: cartData.totalItems,
          contactData: cartData.contactData,
          status: "pending",
        };

        const order = new Order(orderData);
        await order.save();

        console.log("üíæ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:", {
          uid: result.uid,
          totalPrice: cartData.totalPrice,
          email: cartData.contactData?.email,
        });
      } catch (dbError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ –ë–î:", dbError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        // –ù–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      }
    }

    return NextResponse.json({ success: true, data: result });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}
