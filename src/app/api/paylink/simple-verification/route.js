import { NextResponse } from "next/server";

async function handleSimpleVerification(request) {
  try {
    console.log("üöÄ Simple verification callback –ø–æ–ª—É—á–µ–Ω");
    console.log("üìç URL:", request.url);

    const { searchParams } = new URL(request.url);
    const status = searchParams.get("status");
    const uid = searchParams.get("uid");
    const amount = searchParams.get("amount");
    const paymentId = searchParams.get("paymentId");

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    console.log("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç PayLink:", {
      status,
      uid,
      amount,
      paymentId,
      allParams: Object.fromEntries(searchParams.entries()),
    });

    if (!uid) {
      console.error("‚ùå UID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
      return NextResponse.redirect(
        new URL(
          "/failed?error=invalid_request&message=–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç UID",
          request.url
        )
      );
    }

    if (status === "successful") {
      console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ success");

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const successUrl = new URL("/success", request.url);
      successUrl.searchParams.set("uid", uid);
      if (amount) successUrl.searchParams.set("amount", amount);
      if (paymentId) successUrl.searchParams.set("paymentId", paymentId);

      console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:", successUrl.toString());

      return NextResponse.redirect(successUrl);
    } else {
      console.log("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ failed");

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—à–∏–±–∫–∏
      const failedUrl = new URL("/failed", request.url);
      failedUrl.searchParams.set("error", "payment_failed");
      failedUrl.searchParams.set("message", "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª");
      failedUrl.searchParams.set("uid", uid);

      console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:", failedUrl.toString());

      return NextResponse.redirect(failedUrl);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ simple verification:", error);

    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ failed
    return NextResponse.redirect(
      new URL(
        "/failed?error=system_error&message=–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
        request.url
      )
    );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è GET –∏ POST –º–µ—Ç–æ–¥–æ–≤
export async function GET(request) {
  return handleSimpleVerification(request);
}

export async function POST(request) {
  return handleSimpleVerification(request);
}
