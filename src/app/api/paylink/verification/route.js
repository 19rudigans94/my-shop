import { NextRequest, NextResponse } from "next/server";
import connectDB from "@/lib/mongodb";
import Order from "@/models/Order";
import sendEmail from "@/app/utils/sendEmail";

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const status = searchParams.get("status");
    const uid = searchParams.get("uid");
    const token = searchParams.get("token");
    const paymentId = searchParams.get("paymentId");
    const amount = searchParams.get("amount");

    console.log("üîç Verification request:", {
      status,
      uid,
      token,
      paymentId,
      amount,
    });

    if (!uid) {
      console.error("‚ùå UID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
      return NextResponse.redirect(
        new URL(
          "/failed?error=invalid_request&message=–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞",
          request.url
        )
      );
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDB();

    // –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const order = await Order.findByUid(uid);

    if (!order) {
      console.error(`‚ùå –ó–∞–∫–∞–∑ —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return NextResponse.redirect(
        new URL(
          "/failed?error=order_not_found&message=–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
          request.url
        )
      );
    }

    if (status === "successful") {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedOrder = await Order.updateStatus(uid, "successful", {
          paymentId,
          amount: amount ? parseFloat(amount) : order.totalPrice,
          processedAt: new Date(),
        });

        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", {
          uid: updatedOrder.uid,
          status: updatedOrder.status,
          email: updatedOrder.contactData.email,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        try {
          await sendEmail(updatedOrder);
          console.log("üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        } catch (emailError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", emailError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
        }

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        return NextResponse.redirect(
          new URL(
            `/success?uid=${uid}&amount=${updatedOrder.totalPrice}`,
            request.url
          )
        );
      } catch (updateError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", updateError);
        return NextResponse.redirect(
          new URL(
            "/failed?error=update_failed&message=–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
            request.url
          )
        );
      }
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π
      await Order.updateStatus(uid, "failed", {
        errorMessage: `Payment status: ${status}`,
        processedAt: new Date(),
      });

      console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω. UID: ${uid}, Status: ${status}`);

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
      return NextResponse.redirect(
        new URL(
          `/failed?error=payment_failed&message=–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª&uid=${uid}`,
          request.url
        )
      );
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ verification:", error);
    return NextResponse.redirect(
      new URL(
        "/failed?error=system_error&message=–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
        request.url
      )
    );
  }
}
