import { NextRequest, NextResponse } from "next/server";
import connectDB from "@/lib/mongodb";
import Order from "@/models/Order";

async function handleVerification(request) {
  try {
    console.log("üîÑ PayLink verification callback –ø–æ–ª—É—á–µ–Ω");
    console.log("üìç URL:", request.url);
    console.log("üåê Headers:", Object.fromEntries(request.headers.entries()));

    const { searchParams } = new URL(request.url);
    const status = searchParams.get("status");
    const uid = searchParams.get("uid");
    const token = searchParams.get("token");
    const paymentId = searchParams.get("paymentId");
    const amount = searchParams.get("amount");
    const errorCode = searchParams.get("error_code");
    const errorMessage = searchParams.get("error_message");

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –æ—Ç PayLink
    console.log(
      "üìã –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç PayLink:",
      Object.fromEntries(searchParams.entries())
    );

    console.log("üîç Verification request:", {
      status,
      uid,
      token,
      paymentId,
      amount,
      errorCode,
      errorMessage,
    });

    if (!uid) {
      console.error("‚ùå UID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
      return NextResponse.redirect(
        new URL(
          "/failed?error=invalid_request&message=–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞",
          request.url
        )
      );
    }

    if (status === "successful") {
      console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ success");
      console.log(
        "üìß Email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ success –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage"
      );

      // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ë–î –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
      const successUrl = new URL("/success", request.url);
      successUrl.searchParams.set("uid", uid);
      if (amount) successUrl.searchParams.set("amount", amount);
      if (paymentId) successUrl.searchParams.set("paymentId", paymentId);

      console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:", successUrl.toString());

      return NextResponse.redirect(successUrl);
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
      let errorType = "payment_failed";
      let userMessage = "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª";

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ PayLink
      if (errorCode) {
        switch (errorCode) {
          case "F.0998":
            errorType = "payment_cancelled";
            userMessage = "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω";
            break;
          case "F.0001":
            errorType = "insufficient_funds";
            userMessage = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ";
            break;
          case "F.0002":
            errorType = "card_declined";
            userMessage = "–ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º";
            break;
          case "F.0003":
            errorType = "expired_card";
            userMessage = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫";
            break;
          case "F.0004":
            errorType = "invalid_card";
            userMessage = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã";
            break;
          default:
            userMessage = errorMessage || "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª";
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–±–∏—Ä–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è)
      console.log("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –¥–µ—Ç–∞–ª–∏:", {
        uid,
        status,
        errorCode,
        errorMessage,
      });

      console.log(
        `‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω. UID: ${uid}, Status: ${status}, Error: ${errorCode}`
      );

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const failedUrl = new URL("/failed", request.url);
      failedUrl.searchParams.set("error", errorType);
      failedUrl.searchParams.set("message", userMessage);
      failedUrl.searchParams.set("uid", uid);
      if (errorCode) failedUrl.searchParams.set("code", errorCode);

      return NextResponse.redirect(failedUrl);
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ verification:", error);
    return NextResponse.redirect(
      new URL(
        "/failed?error=system_error&message=–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
        request.url
      )
    );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è GET –∏ POST –º–µ—Ç–æ–¥–æ–≤
export async function GET(request) {
  return handleVerification(request);
}

export async function POST(request) {
  return handleVerification(request);
}
