import { NextRequest, NextResponse } from "next/server";
import { sendOrderConfirmationEmail } from "@/app/utils/sendEmail";
import connectDB from "@/lib/mongodb";
import Order from "@/models/Order";

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const status = searchParams.get("status");
  const uid = searchParams.get("uid");
  const token = searchParams.get("token");
  const paymentId = searchParams.get("paymentId");
  const amount = searchParams.get("amount");

  console.log("üîî –ü–æ–ª—É—á–µ–Ω callback –æ—Ç PayLink:", {
    status,
    uid,
    token,
    paymentId,
    amount,
  });

  if (status === "successful") {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
      await connectDB();

      const order = await Order.findOne({ uid: uid });

      if (!order) {
        console.error(`‚ùå –ó–∞–∫–∞–∑ —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
        const failedUrl = new URL("/failed", request.url);
        failedUrl.searchParams.set("error", "order_not_found");
        failedUrl.searchParams.set("message", "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return NextResponse.redirect(failedUrl);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      order.status = "successful";
      order.completedAt = new Date();
      order.paymentData = {
        paymentId: paymentId,
        amount: parseInt(amount) || order.totalPrice,
        currency: "KZT",
      };

      await order.save();

      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:", {
        uid: order.uid,
        status: order.status,
        totalPrice: order.totalPrice,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
      if (!order.emailSent && order.contactData?.email) {
        console.log(
          "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞:",
          order.contactData.email
        );

        const emailSent = await sendOrderConfirmationEmail({
          customer: {
            name: "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ name –≤ contactData
            phone: order.contactData.phone,
            email: order.contactData.email,
          },
          order: {
            items: order.items.map((item) => ({
              name: item.title,
              quantity: item.quantity,
              price: item.price,
              total: item.total,
            })),
            totalAmount: order.totalPrice,
          },
          orderId: order.uid,
        });

        if (emailSent) {
          // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
          order.emailSent = true;
          await order.save();
          console.log("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –≤ –ë–î");
        } else {
          console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email");
        }
      } else if (order.emailSent) {
        console.log("‚ÑπÔ∏è Email —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ");
      } else {
        console.log("‚ö†Ô∏è Email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∑–∞–∫–∞–∑–µ");
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
      console.log(
        `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞. UID: ${uid}, –°—É–º–º–∞: ${order.totalPrice} ‚Ç∏`
      );

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const successUrl = new URL("/success", request.url);
      successUrl.searchParams.set("orderId", uid);
      successUrl.searchParams.set("paymentId", paymentId || "");
      successUrl.searchParams.set("amount", amount || "");

      return NextResponse.redirect(successUrl);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:", error);

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —É—Å–ø–µ—Ö,
      // –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const successUrl = new URL("/success", request.url);
      successUrl.searchParams.set("orderId", uid);
      successUrl.searchParams.set("paymentId", paymentId || "");
      successUrl.searchParams.set("amount", amount || "");

      return NextResponse.redirect(successUrl);
    }
  }

  // –ü—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
  console.log(`‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞. –°—Ç–∞—Ç—É—Å: ${status}, UID: ${uid}`);

  const failedUrl = new URL("/failed", request.url);
  failedUrl.searchParams.set("error", status || "unknown");
  failedUrl.searchParams.set("orderId", uid || "");
  failedUrl.searchParams.set("amount", amount || "");

  return NextResponse.redirect(failedUrl);
}
