import { NextRequest, NextResponse } from "next/server";
import connectDB from "@/lib/mongodb";
import Order from "@/models/Order";
import { sendOrderConfirmationEmail } from "@/app/utils/sendEmail";

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const status = searchParams.get("status");
    const uid = searchParams.get("uid");
    const token = searchParams.get("token");
    const paymentId = searchParams.get("paymentId");
    const amount = searchParams.get("amount");
    const errorCode = searchParams.get("error_code");
    const errorMessage = searchParams.get("error_message");

    console.log("üîç Verification request:", {
      status,
      uid,
      token,
      paymentId,
      amount,
      errorCode,
      errorMessage,
    });

    if (!uid) {
      console.error("‚ùå UID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
      return NextResponse.redirect(
        new URL(
          "/failed?error=invalid_request&message=–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞",
          request.url
        )
      );
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDB();

    // –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const order = await Order.findByUid(uid);

    if (!order) {
      console.error(`‚ùå –ó–∞–∫–∞–∑ —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return NextResponse.redirect(
        new URL(
          "/failed?error=order_not_found&message=–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
          request.url
        )
      );
    }

    if (status === "successful") {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedOrder = await Order.updateStatus(uid, "successful", {
          paymentId,
          amount: amount ? parseFloat(amount) : order.totalPrice,
          processedAt: new Date(),
        });

        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", {
          id: updatedOrder.unifiedId,
          status: updatedOrder.unifiedStatus,
          email: updatedOrder.unifiedEmail,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        try {
          // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–µ–π sendOrderConfirmationEmail
          const emailData = {
            customer: {
              name:
                updatedOrder.customerInfo?.name ||
                updatedOrder.unifiedEmail.split("@")[0], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å email
              phone: updatedOrder.unifiedPhone,
              email: updatedOrder.unifiedEmail,
            },
            order: {
              items: updatedOrder.items.map((item) => ({
                name: item.title || item.name,
                quantity: item.quantity,
                price: item.price,
                total: item.total,
              })),
              totalAmount: updatedOrder.unifiedTotalPrice,
            },
            orderId: updatedOrder.unifiedId,
          };

          await sendOrderConfirmationEmail(emailData);
          console.log("üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        } catch (emailError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", emailError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
        }

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        return NextResponse.redirect(
          new URL(
            `/success?uid=${uid}&amount=${updatedOrder.unifiedTotalPrice}`,
            request.url
          )
        );
      } catch (updateError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", updateError);
        return NextResponse.redirect(
          new URL(
            "/failed?error=update_failed&message=–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
            request.url
          )
        );
      }
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
      let errorType = "payment_failed";
      let userMessage = "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª";

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ PayLink
      if (errorCode) {
        switch (errorCode) {
          case "F.0998":
            errorType = "payment_cancelled";
            userMessage = "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω";
            break;
          case "F.0001":
            errorType = "insufficient_funds";
            userMessage = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ";
            break;
          case "F.0002":
            errorType = "card_declined";
            userMessage = "–ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º";
            break;
          case "F.0003":
            errorType = "expired_card";
            userMessage = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫";
            break;
          case "F.0004":
            errorType = "invalid_card";
            userMessage = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã";
            break;
          default:
            userMessage = errorMessage || "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª";
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      await Order.updateStatus(uid, "failed", {
        errorMessage: `Payment status: ${status}, Error code: ${errorCode}, Message: ${errorMessage}`,
        paymentData: {
          errorCode,
          errorMessage,
          status,
        },
        processedAt: new Date(),
      });

      console.log(
        `‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω. UID: ${uid}, Status: ${status}, Error: ${errorCode}`
      );

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const failedUrl = new URL("/failed", request.url);
      failedUrl.searchParams.set("error", errorType);
      failedUrl.searchParams.set("message", userMessage);
      failedUrl.searchParams.set("uid", uid);
      if (errorCode) failedUrl.searchParams.set("code", errorCode);

      return NextResponse.redirect(failedUrl);
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ verification:", error);
    return NextResponse.redirect(
      new URL(
        "/failed?error=system_error&message=–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
        request.url
      )
    );
  }
}
