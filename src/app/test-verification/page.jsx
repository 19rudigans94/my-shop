"use client";

import { useState } from "react";

export default function TestVerificationPage() {
  const [testResult, setTestResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const testVerificationEndpoint = async () => {
    setLoading(true);
    setTestResult(null);

    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
      const testUrl = `/api/paylink/verification?status=successful&uid=test-uid-${Date.now()}&amount=100&paymentId=test-payment`;

      console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ verification endpoint:", testUrl);

      const response = await fetch(testUrl, {
        method: "GET",
        redirect: "manual", // –ù–µ —Å–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      });

      console.log("üì® –û—Ç–≤–µ—Ç –æ—Ç verification API:", {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries()),
      });

      if (response.status === 302 || response.status === 307) {
        const location = response.headers.get("location");
        setTestResult({
          success: true,
          message: "Verification endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
          redirectTo: location,
          status: response.status,
        });
      } else {
        const result = await response.text();
        setTestResult({
          success: false,
          message: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç verification endpoint",
          response: result,
          status: response.status,
        });
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è verification:", error);
      setTestResult({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ verification endpoint",
        error: error.message,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-8">
        üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PayLink Verification
      </h1>

      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          –ü—Ä–æ–≤–µ—Ä–∫–∞ verification endpoint
        </h2>

        <button
          onClick={testVerificationEndpoint}
          disabled={loading}
          className="w-full bg-blue-500 hover:bg-blue-600 disabled:bg-blue-300 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200"
        >
          {loading ? (
            <div className="flex items-center justify-center space-x-2">
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</span>
            </div>
          ) : (
            "üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å verification endpoint"
          )}
        </button>
      </div>

      {testResult && (
        <div
          className={`rounded-lg shadow-md p-6 ${
            testResult.success
              ? "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800"
              : "bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800"
          }`}
        >
          <h3
            className={`text-lg font-semibold mb-4 ${
              testResult.success
                ? "text-green-800 dark:text-green-200"
                : "text-red-800 dark:text-red-200"
            }`}
          >
            {testResult.success ? "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" : "‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"}
          </h3>

          <div className="space-y-2 text-sm">
            <p>
              <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {testResult.message}
            </p>
            {testResult.status && (
              <p>
                <strong>HTTP —Å—Ç–∞—Ç—É—Å:</strong> {testResult.status}
              </p>
            )}
            {testResult.redirectTo && (
              <p>
                <strong>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:</strong> {testResult.redirectTo}
              </p>
            )}
            {testResult.error && (
              <p>
                <strong>–û—à–∏–±–∫–∞:</strong> {testResult.error}
              </p>
            )}
            {testResult.response && (
              <div>
                <strong>–û—Ç–≤–µ—Ç:</strong>
                <pre className="mt-2 p-2 bg-gray-100 dark:bg-gray-700 rounded text-xs overflow-auto">
                  {testResult.response}
                </pre>
              </div>
            )}
          </div>
        </div>
      )}

      <div className="mt-8 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-yellow-800 dark:text-yellow-200 mb-4">
          üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
        </h3>
        <div className="space-y-2 text-sm text-yellow-700 dark:text-yellow-300">
          <p>1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è verification endpoint</p>
          <p>2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 302 (—Ä–µ–¥–∏—Ä–µ–∫—Ç)</p>
          <p>3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PayLink –º–æ–∂–µ—Ç –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞</p>
          <p>4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PAYLINK_RETURN_URL</p>
        </div>
      </div>

      <div className="mt-6 text-center">
        <a
          href="/success"
          className="inline-flex items-center px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-colors"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ success
        </a>
      </div>
    </div>
  );
}
