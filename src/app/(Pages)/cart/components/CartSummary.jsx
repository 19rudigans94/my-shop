"use client";

import { useState } from "react";
import { ShoppingBag, AlertCircle, CheckCircle, X } from "lucide-react";
import useCartStore from "@/app/store/useCartStore";
import { createPayLinkProduct } from "@/app/utils/paylink";

export default function CartSummary() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [notification, setNotification] = useState(null);
  const [isPayLinkLoading, setIsPayLinkLoading] = useState(false);

  const getTotalPrice = useCartStore((state) => state.getTotalPrice);
  const getTotalItems = useCartStore((state) => state.getTotalItems);
  const clearCart = useCartStore((state) => state.clearCart);

  // –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
  const DEBUG_MODE = process.env.NODE_ENV === "development";

  const debugLog = (message, ...args) => {
    if (DEBUG_MODE) {
      console.log(message, ...args);
    }
  };

  const handleCheckout = () => {
    setIsModalOpen(true);
  };

  const showNotification = (message, type = "error") => {
    console.log(`üîî –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è [${type.toUpperCase()}]:`, message);
    setNotification({ message, type });
    setTimeout(() => {
      console.log("üîï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫");
      setNotification(null);
    }, 5000);
  };

  const handlePayLinkCheckout = async () => {
    console.log("üõí –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayLink");
    console.log("- –û–±—â–∞—è —Å—É–º–º–∞:", totalPrice, "—Ç–µ–Ω–≥–µ");
    console.log("- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:", totalItems);

    if (totalItems === 0) {
      console.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã");
      showNotification("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", "error");
      return;
    }

    const cartItems = useCartStore.getState().items;
    console.log("üì¶ –°–æ—Å—Ç–∞–≤ –∫–æ—Ä–∑–∏–Ω—ã:", cartItems);

    setIsPayLinkLoading(true);
    console.log("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ PayLink");

    try {
      console.log("üöÄ –í—ã–∑–æ–≤ createPayLinkProduct...");
      const cartData = {
        totalPrice,
        totalItems,
        items: cartItems,
      };

      const result = await createPayLinkProduct(cartData);
      console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç createPayLinkProduct:", result);

      if (result?.pay_url) {
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", result.pay_url);
        showNotification("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã...", "success");

        console.log("‚è∞ –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (1000ms)...");
        setTimeout(() => {
          console.log("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞:", result.pay_url);
          window.location.href = result.pay_url;
        }, 1000);
      } else {
        console.error("‚ùå PayLink –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã");
        console.error("- –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", result);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã");
      }
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ –≤ handlePayLinkCheckout:");
      console.error("- –ù–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.name);
      console.error("- –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.message);
      console.error("- –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);

      showNotification(
        error.message ||
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "error"
      );
    } finally {
      console.log("üèÅ –°–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PayLink");
      setIsPayLinkLoading(false);
    }
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const handleOrderSuccess = () => {
    console.log("üéâ –£—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞");
    console.log("- –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...");
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    clearCart();
    console.log("- –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
    closeModal();
    console.log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω");
  };

  const totalPrice = getTotalPrice();
  const totalItems = getTotalItems();

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  console.log("üîÑ CartSummary —Ä–µ–Ω–¥–µ—Ä:");
  console.log("- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:", totalPrice);
  console.log("- –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", totalItems);
  console.log("- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PayLink:", isPayLinkLoading);
  console.log("- –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:", isModalOpen);
  console.log("- –¢–µ–∫—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", notification);

  return (
    <>
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden p-6">
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
          –ò—Ç–æ–≥–æ
        </h2>

        <div className="space-y-3 mb-6">
          <div className="flex justify-between text-gray-600 dark:text-gray-400">
            <span>–¢–æ–≤–∞—Ä—ã ({totalItems})</span>
            <span>{totalPrice.toLocaleString()} ‚Ç∏</span>
          </div>

          <div className="flex justify-between text-gray-600 dark:text-gray-400">
            <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
            <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
          </div>

          <div className="border-t border-dashed border-gray-200 dark:border-gray-700 pt-3 mt-3">
            <div className="flex justify-between font-semibold text-lg text-gray-900 dark:text-white">
              <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</span>
              <span className="text-amber-600 dark:text-amber-400">
                {totalPrice.toLocaleString()} ‚Ç∏
              </span>
            </div>
          </div>
        </div>

        <div className="space-y-3">
          <button
            onClick={() => {
              console.log(
                "üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ (PayLink)'"
              );
              handlePayLinkCheckout();
            }}
            disabled={totalItems === 0 || isPayLinkLoading}
            className={`w-full py-3 px-4 rounded-lg font-medium flex items-center justify-center transition-all ${
              totalItems === 0 || isPayLinkLoading
                ? "bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed"
                : "bg-amber-500 text-white hover:bg-amber-600"
            }`}
          >
            {isPayLinkLoading ? (
              <>
                <div className="w-5 h-5 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏...
              </>
            ) : (
              <>
                <ShoppingBag className="w-5 h-5 mr-2" />
                –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ (PayLink)
              </>
            )}
          </button>
        </div>

        {totalItems > 0 && (
          <p className="mt-4 text-xs text-gray-500 dark:text-gray-400 text-center">
            –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏
            –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã
          </p>
        )}
      </div>

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      {notification && (
        <div
          className="fixed top-4 right-4 max-w-sm w-full"
          style={{ zIndex: 999999 }}
        >
          <div
            className={`p-4 rounded-lg shadow-xl flex items-center space-x-3 backdrop-blur-sm ${
              notification.type === "success"
                ? "bg-green-50/95 dark:bg-green-900/90 border border-green-200 dark:border-green-800"
                : "bg-red-50/95 dark:bg-red-900/90 border border-red-200 dark:border-red-800"
            }`}
            style={{ zIndex: 999999 }}
          >
            {notification.type === "success" ? (
              <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400 flex-shrink-0" />
            ) : (
              <AlertCircle className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0" />
            )}
            <p
              className={`text-sm font-medium ${
                notification.type === "success"
                  ? "text-green-800 dark:text-green-200"
                  : "text-red-800 dark:text-red-200"
              }`}
            >
              {notification.message}
            </p>
            <button
              onClick={() => {
                console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é");
                setNotification(null);
              }}
              className={`p-1 rounded-full hover:bg-opacity-20 transition-colors ${
                notification.type === "success"
                  ? "hover:bg-green-600"
                  : "hover:bg-red-600"
              }`}
              style={{ zIndex: 999999 }}
            >
              <X
                className={`w-4 h-4 ${
                  notification.type === "success"
                    ? "text-green-600 dark:text-green-400"
                    : "text-red-600 dark:text-red-400"
                }`}
              />
            </button>
          </div>
        </div>
      )}
    </>
  );
}
